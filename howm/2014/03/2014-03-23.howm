= Xcode Keyboard Shortcut
[2014-03-23 00:01] 

* Cmd + G
  検索において該当した次の検索結果に移動する
* Cmd + Shift + G
  検索において該当した一つ前の検索結果に移動する
* Cmd + Shift +[ / ]
  次の（前の）タブ
* Cmd + Ctrl + J
  定義へジャンプ
* Cmd + Option + 0
  Hide Utilities
* Cmd + J
  Focusエリアの手動選択
*　Cmd + Control + ← / →
  前の（後の）ファイル
* Cmd + Shift + O
  シンボル開く
* Cmd + Shift + O ⇒ Option + Return
  シンボルを指定して、さらに分割して開く
* Ctrl + 6
  メソッド定義を開く（★超便利）
* Cmd + Shift + Y
  Debug Areaの表示/非表示
* Cmd + Shift + 1
  Welcomeウインドウ表示
* Cmd + Shift + 2
  Organizer表示

= Effective Objective-C 2.0 項目4 [プリプロセッサの#defineではなく型付きの定数を使う]
[2014-03-23 00:02] 

* #define
 ⇒書き換え可能。名前空間の概念のないObjective-C上では使うべきではない。

* (翻訳単位に固有な定数)他のクラスで利用することのない定数は、実装ファイル内でstatic & constで宣言すべきだ。
  ⇒グローバルシンボルテーブルに収められない。名前空間的なClassPrefixを付ける必要はない。
* (グローバルな定数)他のクラスでりようすることを想定した定数は、ヘッダーファイルで宣言、実装ファイルで実装、を守るべき。そのためにexternがある。
  ⇒グローバルシンボルテーブルに収められる。名前空間的なClassPrefixを付ける必要あり(クラスと同一なものにして、関連性を明らかにすべき)
 例)
  // .h
   extern NSString *const LSNGameDifficultyNotification;

  // .m
   const NSString *LSNGameDifficultyNotification = @"DifficultyNotification";

= 現在の言語が何語かを調べる
[2014-03-23 00:51] >>> http://qiita.com/eggmobile/items/02801f0a390a024f61d4

-(BOOL)isLocaleJapanese{
    //まず言語のリストを取得します。
    NSArray *languages = [NSLocale preferredLanguages];
    // 取得したリストの0番目に、現在選択されている言語の言語コード(日本語なら”ja”)が格納されるので、NSStringに格納します。
    NSString *languageID = [languages objectAtIndex:0];

    // 日本語の場合はYESを返す
    if ([languageID isEqualToString:@"ja"]) {
        return YES;
    }

    // 日本語の以外はNO
    return NO;
}

